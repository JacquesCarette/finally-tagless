   2010 Funding Cycle 1:
     * OFI Deadline: April 15
     * OFI Decisions: May 21
     * Full Proposal Deadline: Sept 15
     * Funding Decisions: Dec 22

   Project Information

   Please answer the questions below in the space provided. If you are
   invited to submit a Full Proposal, you will be given the opportunity to
   provide more detailed responses.

   Project title:
   Please provide us with a descriptive project title. Please limit your
   response to 150 characters.

Making the exploration-exploitation trade-off
in the generalize-specialize approach to mathematical software

   Executive Summary:
   Please provide an executive summary of your proposal. The summary
   should highlight the strategic problem or opportunity you intend to
   address, the main activities of your proposed project, including any
   innovative approaches, and the anticipated concrete outputs and
   outcomes. Please limit your response to 1,300 characters.

The creation and application of abstractions is one of the most
celebrated and widespread modes of mathematical reasoning, yet it is
elusive even in the engineering of software for mathematics.
How can an expression simplifier decide to prove a lemma
that holds for all monoids, and how can an equation solver decide to
optimize its machine code for subproblems of a linear form?  We aim to
build prototype software that makes such decisions and carries them out
under the inherent uncertainty of creative research.  To do so, we will
combine recently developed (a) algorithms in artificial intelligence
for making the exploration-exploitation trade-off; (b) techniques in
symbolic computation for representing and composing code; (c) constructs
in programming languages for generating and prioritizing execution
paths.  The confluence of these interdisciplinary developments makes
the time ripe for advancing this area of foundational and practical
importance.  As internationally recognized experts on these disciplines,
we will organize a series of focused research workshops, 
involving graduate students and invited experts.  As well as producing
software, we will document our work through scientific papers and
produce tutorials for a wide variety of audiences.

   Project Description:
   Please describe the program or project for which you are seeking
   support. What activities are involved in the project? Who will be
   involved (as co-investigators, co-organizers, speakers at a conference,
   judges, etc.)? What core questions or hypotheses do you plan to
   explore, including any possible "Big Questions"? Please limit your
   response to 4,000 characters.

Our big questions are, what do mathematicians do, and how can
computers best help?  A common informal answer to the first question
is that mathematicians alternate between proving general theorems and
calculating special cases.  Analogously, mathematics software today can
be categorized as either provers or calculators.  Just as it is ill
understood how mathematicians mediate between the two crucial activities
of proof and calculation, the two kinds of mathematics software --
though both valuable -- are engineered with incompatible organizations
today.  We propose to build the software infrastructure needed for a
mathematical assistant to intertwine these activities and thus model how
a mathematician too might do so.

A tremendous amount of mathematical knowledge already exists in
various forms -- formalized proofs, informal arguments, computational
procedures, etc.  Mathematicians are much better than mathematics
software today at using all this knowledge, for at least two reasons.
First, digital mathematical knowledge has yet to be assembled into
a scalable collection of reusable components.  Current systems are
discovering the severe limits of their designs, which do not take
advantage of how *general* mathematical theories are.  Second, the
current focus on complete algorithms and decision procedures does
not explain how to recognize the *special* structure present in most
problems that lets them be solved efficiently.  For example, although
SAT is an NP-complete problem, and although expression simplification
and termination checking are undecidable in general, instances of these
problems encountered in practice are frequently quite tractable -- even
in polynomial time -- once the proper structure is found and exploited.
We wish to attack these `hard' problems head-on by coordinating
semi-decision procedures, with the help of algorithms from artificial
intelligence (especially from reinforcement learning) for balancing
exploring generalizations against exploiting specializations.

To do this, we need to arrange our mathematics software in a new way.
For example, our top candidate for a prototype to build using our
generalize-specialize approach is a *simplifier*: a program that looks
for expressions that are equivalent to a given expression but smaller.
Our simplifier would apply known simplification rules recursively as
usual, while at the same time learning the structural regularities
of the expression.  It would use these regularities and randomized
look-ahead to predict how long the current process would take, to
search for a specialized algorithm, to select structure-revealing
transformation paths (which are not necessarily simplifications), and
most importantly, to decide dynamically how much processing time to
devote to each of these activities -- that is, to trade off exploration
against exploitation.

For these activities to be manageable to build and efficient to
orchestrate, they must not be tangled up in a monolithic code
base, but rather be modules that exchange control and data through
well-defined interfaces.  In this regard, they should resemble user
processes running alongside each other in an operating system, but
collaborate more tightly and with less nesting overhead.  We will apply
programming-language constructs such as delimited control and type
abstraction to achieve such efficient modularity.

The research activities of this project will center around a series of 6
workshops, each about two weeks long and involving the three principal
investigators (Jacques Carette, Oleg Kiselyov, and Chung-chieh Shan),
a couple of their students, and a few varying invited experts such as
Pierre-Arnaud Coquelin, James Davenport, Bill Farmer, John Harrison,
Michael Littman, Jeff Pelletier, and Walid Taha.  Each workshop will
feature a motivating talk, a joint programming goal, and detailed
technical discussions that allow for spontaneous presentations.

   Strategic Promise:
   Why is the proposed project important relative to the current state of
   knowledge in your field or across fields? Please limit your response to
   1,000 characters.

   Capacity for Success:
   Please explain how you (the applicant, the project team, and/or the
   organization(s) connected to the proposed project) are positioned to
   carry out the proposed activities with distinction and a high standard
   of excellence. Please limit your response to 1,000 characters.

Chung-chieh Shan is an active and widely published researcher and
teacher of programming language theory, artificial intelligence,
formal logic, and cognitive science at Rutgers University, where he
collaborates with the groups of Michael Littman (reinforcement learning)
in computer science and Rochel Gelman (mathematical reasoning) in
cognitive science and psychology.

   Expected Outputs:
   Outputs are the specific, quantifiable work products that you will
   create during the project. Examples include but are not limited to:
   academic papers submitted for publication, book manuscripts, conference
   proceedings, training sessions, curricula, prize competitions, films,
   events, and publicity campaigns.
   Please describe the expected outputs of your project. Please limit your
   response to 1,000 characters.

[Just notes]  Software, papers, workshops, (tutorials?)

   Expected Outcomes:
   Outcomes are the realistic and measurable differences that you believe
   will result from your project's outputs. Examples include but are not
   limited to: significant new lines of inquiry that might develop if your
   research hypotheses are confirmed, and measurable changes that your
   work might bring about in the actions or attitudes of your target
   audience.
   Please specify the audiences that your project seeks to reach, as well
   as the specific outcomes that you expect will result. Please limit your
   response to 1,000 characters.

[Notes]  Sustainable software architecture for exploration/exploitation,
especially in the presence of abstraction/specialization.

   Currency:
   Please select the currency of your funding request. The Foundation
   awards grants in US dollars, euros, and British pounds.

US dollars

   Request Amount:
   Please provide us with the amount of funding you are requesting from
   the Foundation. Please round to the nearest dollar, euro, or pound, and
   do not use symbols or punctuation.

   Total Project Amount:
   Please provide the total amount of funding necessary for the
   implementation and completion of the project. This amount may be equal
   to or greater than the amount of funding you are requesting from the
   Foundation. Please round to the nearest dollar, euro, or pound, and do
   not use symbols or punctuation.

   Additional Funding from Other Sources:
   The Foundation favors projects that have leveraged additional funding
   from other sources. Please provide us with the names of up to five
   additional sources of funding for this project. For each potential
   source, please list the amount of funding you have secured or are
   requesting and the status of your request. We do accept high-quality
   proposals that identify the John Templeton Foundation as the only
   potential funder. Please limit your response to 1,000 characters.

[Jacques: I have some (small amounts of) money from NSERC, MITACS and
the Ontario governement on 'related' projects]

   Proposed Project Start Date:
   Please provide the date you would like to start the project, taking
   into consideration the number of months it will take the Foundation to
   review and decide upon your Full Proposal request. Please refer to the
   Foundation's grantmaking calendar to learn when you will receive a
   decision about your Full Proposal from the Foundation (if invited).

Jan 15, 2011

   Proposed Project End Date:
   Please indicate when your proposed project will be completed. The
   Foundation generally funds projects for no more than three years. In
   rare instances the Foundation funds projects for up to five years. The
   Foundation is restricted from funding any project for longer than five
   years.

Jan 15, 2014

   Relation to Sir John Templeton's Donor Intent:
   We recognize that our high aspirations can be achieved only through the
   vision, passion, and action of extraordinary grantees. At the same
   time, we are legally and ethically bound by Sir John Templeton's
   charter to fund only those proposed projects that have the capacity to
   advance his philanthropic vision. We invite you to describe how your
   vision for the proposed project aligns with Sir John's Donor Intent.
   In constructing your response, please be sure to describe how
   your proposed project addresses one or more of the Big Questions
   associated with the Foundational Questions in the Mathematical Sciences
   Funding Priority. Please limit your response to 1,000 characters.

