	We have studied your Oxford lecture slides at great length.
They helped us very much to clarify our thinking on two topics: first,
defining optimality without self-interpretation (bottom line: it can be
done); second, the use of types in metaprogramming (bottom line: our
paper answers the question posed at the end of your slides).

1. Optimality without self-interpretation

	Optimality is neither a property of a partial evaluator "mix"
nor a property of a self-interpreter "int", but a relation between
the two.  Like you (and Walid Taha), we seek a mix-int pair that is
optimal, but whereas you start with a "natural" int (which incurs some
interpretation overhead) and seek a mix optimal for that int, we in some
sense write int in a different way (now natural to us) for which the
trivial mix is optimal.  Your slides provide a concrete framework for us
to show that, not only can mix be written in a different language than
its object language, but we can generalize mix to a compiler and int to
an interpreter, without sacrificing the notion of optimality.

	To start with, your definitions do not imply at all that mix
must be written in the same language L and that we really need a
self-interpreter!  Let's go back to slide 15 with the definitions, and
add indices to describe which program is evaluated in which language.

Interpreter (for S written in L)
	[[s]]_S = [[int]]_L s
mix (for L)
	[[p]]_L s = [[ [[mix]]_L' p s]]_L
Nothing says that L' must be the same as L.  Now, let's substitute int
for p:
	[[int]]_L s = [[ [[mix]]_L' int s]]_L
or
	[[s]]_S = [[ [[mix]]_L' int s]]_L
Now, suppose that S is a subset of L, and so [[.]]_S is [[.]]_L. We
get
	[[s]]_L = [[ [[mix]]_L' int s]]_L
meaning that s' == [[mix]]_L' int s must have the same meaning as s
in L, so s and s' are comparable and we can talk about optimality. 

	We treat optimality as a problem of writing not mix but int in
the right way.  We do not presume int to incur interpretation overhead
for mix to remove.  To be more precise, let us consider a compiler
	comp :: (a->b) code_L -> (a->b) code_T
from language L to a language T (machine code).  Here we write code_L
for an underbar subscripted by L.  (In the case where L and T are the
same, as when generating code using MetaOCaml, comp could just be the
identity.)  Let again S be a subset of L, and s \in S (hence s \in L).
We can compile s and evaluate on some dynamic data d:
	[[comp s]]_T d
Suppose that we have an interpreter for s written in full L:
	int :: ((a->b)code_S -> (a->b)) code_L
We _symbolically_ compose it with ((a->b) code_S) code_L and compile the
result:
	[[comp (int \circ s_in_L)]]_T d
The two expressions have the same denotation; if they have the same
running time (in particular, if they are alpha-equivalent), then we call
int optimal for all s with respect to the compiler comp.  The difference
is that before we relied on a super-smart mix (and it must indeed be
quite smart, see slide 30).  Now we say that our int is optimal if an
off-the-shelf optimizing compiler (GHC or MLton) is sufficient to remove
all interpretation overhead.

2. Types in metaprogramming

	It is crucial in metaprogramming to make seemingly pedantic
distinctions between semantic values (including program texts) and their
representations in various languages.  For example, it is useful above
to track the subscripts on double brackets and underbars, and the same
discipline helped us make sense of your slides from page 2 onward.  In
other words, we agree with your last slide on the need for "better
mathematical understanding of the underbar types."

	In this regard, it is nice to use a typed metalanguage that
automatically checks these subscripts along with the object-language
types they are attached to.  For example, the last bullet on slide 31
asks: "how to prove that an interpreter or compiler has the desired
type?"  Well, in our Haskell code, the interpreter has the type
	runR :: forall t. R t -> t
and that type is verified by the Haskell type-checker itself.  Ditto for
the compiler C.  So, not only have we proven that the interpreter and
the compiler have the desired type, but we have done so using the type
checker of the metalanguage.  No need for an external prover.

	Our code uses different metalanguage types for encodings of
different object types (for example, R Int, R Bool, etc.), but it never
needs a single supertype for these metalanguage types.  Thus it avoids
"Univ" in the type of [[sint]] on your slide 28.  Those occurrences of
"Univ" suggest that the metalanguage's type system would need fancy
features such as GADTs.

	If we understand Makholm's solution correctly, it first
specializes an interpreter that uses object-type tags, then eliminates
the tags from the output program by typing it more precisely.  It is a
natural approach to follow, but the object language is first-order, and
Taha, Makholm, and Hughes (PADO 2001) note that one cannot claim that
all tags will be eliminated this way even for a simple higher-order
language.  In fact, Pašaliç, Taha, and Sheard (ICFP 2002) showed that
some tags will remain.  So, optimality cannot be achieved this way in
general.  Our approach deals with a higher-order language (with no limit
on order) and assures that all tags are eliminated using _standard_ type
inference.

Miscellaneous remarks about slides:

slide 6: The way mix might apply to itself is not quite self-application
in the sense of general functional programming, because the argument to
mix is the program text of mix, not the function it denotes.  In any
case, the occurs-check failure that would seem to prevent both kinds of
self-application is defused by polymorphism: the polymorphic identity
function does apply to itself.

slide 9: It is trickier than it looks to define the denotation
	[[ t code ]] = { p \in D | [[p]] \in [[t]] }
because the function [[p]] (the meaning of a program p) is a _partial_
function.  If we say, well, if [[p]] is undefined, we just not consider
that p to be the meaning of the denotation of [[t code]], then the type
inference rules may become unsound.  For example, slide 13 shows
pgm-spec, which takes a pair (a*b -> g) code * a and gives (b->g) code.
Well, the program a*b->g may be terminating, but b->g might not.  So,
pgm-spec may take something with non-empty denotation and return the
result with the empty denotation.

slide 12 has a typo in the code for sum(l): 
	if l = [] then 0 (rather than [])...


