	Thank you very much for your emails, especially the provocative
thoughts and the slides.  We are thrilled to start a dialogue about the
relation between partial evaluation and types.

	We apologize that our earlier message obscured our main
question, which can be stated without types: is there a notion of
optimal interpretation that depends not on any self-interpreter but only
on a metacircular interpreter?  This is the question that we hope Feigin
and Mycroft's PEPM 2008 work can help with.

	Still, types are never far from our minds.  On this issue,
your Oxford slides have been extremely helpful.  We will respond
in more detail after we study your work with Henning Makholm.  We
certainly agree that types make meta-programming challenging and perhaps
self-interpretation impossible, as suggested by the diagonalization
argument and symptomized by the need for polymorphism.  We further
agree that strengthening the metalanguage type system only displaces
the problem and does not solve them.  Nevertheless, meta-programming is
useful in typed languages, and we have an approach that deals with some
of the challenges.

	For now, we just want to point out that we have managed to
define a metacircular interpreter and partial evaluators for a typed
language in a typed language without using a universal type.  The
object language is higher-order and includes fix (so it is not strongly
normalizing); the metalanguage is just ML or Haskell.  We attach our
slides; you can find them with our paper at
	http://www.cs.rutgers.edu/~ccshan/tagless/
To avoid the universal type, we treat an interpreter or partial
evaluator as an _argument_ to the object program rather than a
_function_ that applies to the object program.  In our evaluators, types
in the object language have no computational content, as you said.

	If we remove fix from the object language (which we don't
have to, and should not for practical programming, as you noted),
then our (partial) evaluators are manifestly total in that they avoid
non-exhaustive pattern-matching.  In contrast, evaluators built using
the universal type are not optimal because they incur tagging overhead,
and not total because they contain non-exhaustive pattern-matching.
This contrast in totality lets us argue intensionally that our
evaluators are optimal, even though they are not a self-interpreter.

	We don't have to remove fix from the object language (and should
not for practical programming, as you noted).  Of course, our evaluators
with fix are necessarily not total, so we cannot argue intensionally
that they are optimal.  That is why we are interested in extensional
arguments.

