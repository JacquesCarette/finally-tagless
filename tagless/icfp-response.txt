


The draft response to the reviewers is immediately below. Next follows
the (very) draft message to Norman, should we chose to send it. Next
follows some other material. Please see notes marked XXX

------------------------------------------------------------------------

We thank the reviewers for their comments and especially references.
We reiterate that we contribute the first typed tagless family of
interpreters, partial evaluators and CPS transformations, implemented in
the type system of mainstream ML and Haskell.  We agree that "shallow
embeddings", "multiple interpretations of the pervasives of a standard
language", and "the encoding of the term GADT as its elimination form"
are not new ideas, but we take it to be a strength of our work that a
simple combination of these ideas solves a problem formulated and left
open by Pasalic et al. (ICFP 2002) and Xi et al. (POPL 2003).

The references provided by the reviewers reflect the "originality"
of this combination.  

First (in
response to reviewer 1), our interpretations are both typed and tagless,
specifically using no universal type and type tags.  In contrast:  Lava
defines universal type for Bit and NumSig.  Excel functions are untyped.
Rhiger uses universal types throughout (Raw, Term, etc.) and numerous
type tags in Section 3.  Rhiger even specifically says his encoding
cannot do typed CPS transformation, unlike ours.  The simplicity of our
encoding enables trivial proofs of soundness and completeness compared
to Rhiger's.  It also makes self-interpretation simple, which is a
strength of our work.

Second (in response to reviewer 3), our interpretations require no
extension to the type system of mainstream ML and Haskell.  Pfenning
and Lee conclude that partial evaluation and program transformations
"do not seem to be expressible" even using their extension to F-omega,
perhaps because their avoidance of general recursive types compels
them to include the polymorphic lift that we avoid in our Section 4.1.
Generic Haskell is not mainstream.  Xi et al. point out why intensional
type analysis cannot handle HOAS.  Although GADTs may be "more flexible
and easier to use", they are not available in mainstream ML, and GHC as
released does not implement them correctly (as Simon Peyton-Jones admits
publicly).  Whereas Pasalic et al. have already solved the problem of
tagless typed (staged) interpretation, our solution is the first to
use only facilities available in mainstream ML and Haskell, namely
Hindley-Milner and either simple modules or constructor classes.  The
simplicity of these facilities is again a strength of our work: it makes
embedded DSLs more practical to build.

Reviewer 1 questions if we solve "the original problem".  We solve the
problem formulated by Pasalic et al. (ICFP 2002) and Xi et al. (POPL
2003).  In particular (in response to "Looking at section 1.3 I see a
compiler, not an interpreter"), we adopt their notions of interpreter
and staging.  We use their running example and achieve the result they
call desirable.

Reviewer 2 hopes to achieve staging using Template Haskell.  We actually
did precisely that, and claimed exactly "that [the code TH
produces] will always be type correct".  When we showed our working code to
some people, they seemed unimpressed (perhaps due to the use of TH), so
we never mentioned it in the paper, but it definitely motivated the
paper.


------------------------------------------------------------------------
Letter to Norman

We point out that references pointed out by the reviewers as being
precedents to our work are in fact not. Alas, we don't have space to
show where exactly in the references pointed out by the reviwer there is a
definition of the universal type or tag -- which we explicitly do not
have. We have this information, but we don't have space to present it.
Despite what reviewers 1 and 3 claim -- the problem as formulated (not by us!
-- but in PasalicICFP02, for example) has not been solved using
mainstream ML or Haskell. 

It appears our paper raises a question as to what is an acceptable
contribution: should solving a known open problem with existing,
elementary means count as a contribution? Or we must necessarily
strive for a complex solution, and propose new methods?

Indeed most of the components of our solution are well-known. Indeed
the solution is simple, in hindsight. Yet the problem of a
tagless interpreter, as formulated in the recent public record -- Pasalic
etal (ICFP02, PEPM07) and Xi etal (POPL03) -- has been declared open
and it is argued that the solution requires major extension to the
language, such as GADTs or dependent types. The extension to tagless
partial evaluation was open too (Walid Taha, Tagless ...) and the solution
proposed there did not eliminate all tags. Again, the fact that our
solution is elementary and uses only existing known tools to give a
previously unknown solution to an important problem should not be
counted as a disadvantage.

We did not claim to invent a new method (of partial evaluation or of
interpretation). Rather, we claim that existing, old methods, when
properly combined, can solve problem that was publicly declared to be
unsolvable with the existing, old means.

However useful these extensions may be, we demonstrated that the problem
described there as _open_ its extensions can be solved using
existing means. 

Some parts of our solution have been known before; we mention that in
the paper and reviewers point more references. However, none of the
parts have been combined to solve the problem stated as open in
the recent published literature Walid03 and WalidTagless.

Our stress on using only mainstream distributions of ML and Haskell is
legitimate. We all have first-hand industrial experience, and can
vouch that industrial programming is not the place to try experimental
languages or features. We need stability and maturity. One may come
across a similar requirement in education, when designing a stable
course. 

We understand the emotional response our paper may provoke, by showing that new
and exciting features are not absolutely necessary to solve some problems which
were claimed to require these features.  The new features may be deservingly
exciting and suitable. We do not wish to stop progress. We merely wish to set
the record straight as to which problem can be solved with which minimal and
widely available tools.




------------------------------------------------------------------------

Rhiger's thesis is actually good! We should refer to it in related
work.



Augustsson's
work (check? excel functions are untyped) 
nor Lava (it has universal type for Bit and NumSig and correspondent
tag matching: it is not tagless: see Sec 32 of Lava: Hardware Design
in Haskell (1998)) fit into that category. 
Rhiger's  thesis
http://www.brics.dk/DS/01/4/index.html
It6 is presty good. But Fig 2.2, p33: universal type Raw. 
They use phantom type upon the Exp datatype. But that is cheating:
phantom type means essentially we can easily do coerce. We use real
types.
That's why
he had to do tedious proofs in Sec 2 of soundness and completeness of
embedding. Whereas our proofs are obvious.
His sec 3 is based on data representation of terms. They have type
tags.  We do nothing of
that kind: See Sec 3.1.2. See numerous "data Term" in Sec3, which is
the U type. In Sec 3.3.4 (p76) Rhiger specifically says that his
encoding cannot do typed CPS transformation -- whereas our does. BTW, Rhiger thesis contains the definitions
of the interpreter and the compiler, in the beginning. Use this in
response to Rev1)



Ken said: It seems that we should appeal especially to the second reviewer, and
acknowledge that the individual techniques we use are not new (and
thank the reviewers for the references), but we use them together to
solve an important and previously unsolved problem (which, granted, has
never been defined in full generality).  The simplicity ("[not] enough
originality") of our solution speaks in favor of our approach, not
against!




Rev3 wrote: "For example, can you implement a transformation that
eliminates eta-expansions from a term?"

Rev3 wrote: "This continual modification of your framework is disturbing. Is
there a general case that parameterizes the type by three types---the
case for int, the case for bool and the case for arrow?"

