\jacques{My comments are all enclosed in \jacques{}.  The only ones which
really need an action are those marked TODO}

Dear author(s),

I am delighted to inform you that your paper has been accepted for
presentation at APLAS 2007 and inclusion in the proceedings.  We
received 84 submissions this year, and the program committee selected
25 papers for publication, a 30% acceptance rate.

For the final version of your paper, please carefully address the
comments you will find in the attached reviews. In particular,
please address the following comment raised during the PC meeting:

  " ... The authors claim their idea is new (e.g., at the second last
   paragraph in the introduction), but it has been well-known in fact.
   See Reference [32, Section 5] for instance ... "

\jacques{I have softened the claim in that paragraph and put in an
explicit link to [32] there.  The real issue is that previous work on
this has not "penetrated" the mainstream enough!}
\oleg{I also added explicit ref to [32,38] in the last paragraph of
the introduction, which already was saying that all of our techniques,
in isolation, have been published.}

Also, if you need to change your paper title, please send me email
(<aplas2007@easychair.org>) as soon as possible.

In order to publish your paper, we need to receive the final version
and a signed LNCS copyright form before

                FRIDAY, SEPTEMBER 7, 2007 

in the format specified by Springer-Verlag at the URL:

           http://www.springer.de/comp/lncs/authors.html 

The paper shall not be more than 16 pages long. 

---------------------------------------------

Paper: 16
Title: Finally Tagless, Partially Evaluated (Tagless Staged Interpreters for Simpler Typed Languages)


-------------------- review 1 --------------------
 
OVERALL RATING: -1 (weak reject) 
REVIEWER'S CONFIDENCE: 3 (high) 
Presentation: 2 (poor)
 
----------------------- REVIEW --------------------

This paper talks about embedding a typed target language into a 
typed meta language in a way that is type safe and free from
interpretative overhead. By changing the representation type, 
the embedded language is allowed to possess various features, 
including staged evaluation and partial evaluation. The authors
showed that all these are possible without the use of GADT
or dependent types.

The paper deals with an interesting topic. However, technique-wise,
I am not particularly impressed. I would be surprised if the trick
of type safe embedding (which the authors call "tagless interpretation")
is not well-known. Therefore, the technically new and interesting 
materials actually start from Section 4 (page 9) about the partial
evaluator which, I believe, has potential to be a stand-alone paper
but unfortunately not yet fully developed.

\jacques{I guess this reviewed missed the explicit sentence that 
opens the last paragraph of the introduction!}

The authors apparently suffer from lack of space. But most of the
trivialities in Section 1.1, 1.2, 1.3, and 2.2 can be spared. 
In the accompanying code there seems to be more interesting stuff
not talked about: self interpretation, transformation to CPS, etc.
What are they saved for? The paper unfortunately only talks about
Jones optimality briefly in the last section. I think it is an
interesting result that a typed, tagless language can be Jones-
optimal, which deserves to be discussed and demonstrated more.

\jacques{They are saved for the Journal version, obviously ;-).  I guess
that's the paper this reviewer really wanted to see.}

I don't see the point of the de Bruijn notation in Section 1.1
and 1.2, since they are not used in the rest of the paper. For
a while I was thinking how the authors could, in the presence
of fixed points but without (at least a simulation of) dependent 
types, check that the de Bruijn indexs are never out of bound.
It turns out that de Bruijn indexes are eventually abandoned. 
On page 5, it is listed as a contribution that the authors "use 
the type system of the meta language to check statically that 
an object program is .. closed." But, if closeness here refers 
to not having free variables, it is not checked by the type system.

\jacques{As I said in email, there seems to be a point here, as even
we say in the paper.  That needs HOAS.}
\ccshan{Clarified that both the HOAS code and the de Bruijn code
prevents evaluating open code.}

I am not sure it is a good idea to use two languages in a paper.

\jacques{It does make the paper harder to read for the common mortal,
yes.  But, oh well, this is research, and we're not out to pander to
the lowest-common-denominator}
\oleg{Haskell code indeed was confusing in APLAS version of Sec 4. Now
Sec 4 uses only OCaml.}

It is true that some features are better demonstrated in one
language than another, but the readers still keep wondering
about the missing side. I, for one, was wondering whether the
Haskell counterpart of Section 3 would make any sense, given that
Haskell is not a multi-staged language, until I actually downloaded
the accompanying code. I believe it does make sense in the context, 
but the readers need some explanation. I would prefer the old way
of using one language in the running text and put the other
in the appendix --- if I understand correctly, this conference 
does allow appendixes outside the page limit.

\jacques{This is an interesting point, about appendices not counting
towards the page limit.  If this is so, then we might be able to 
do some real improvements to this paper.  But then again, do we really
have the time?}
\oleg{I think the reviewer is greatly mistaken about the space allotment.}

Section 4.1, ".. there is no polymorphic 'lift' function, of
type a -> C a.." Although some references are listed, it would be
nice to explain why not, in a sentence or two.

\jacques{And those sentences or two are in the next paragraph!}

Section 4.2, "The two alternative constructs of a Maybe value,
Just and Nothing, tag each term with a phase: present or future."
I think both the present and future staged expression are contained
in P1, while the Maybe constructor indicated whether there does
exist a static value.

\jacques{We are implicitly using the isomorphism that
P1 (Maybe (R t)) (C t) ~~ Either ((R t),(C t)) (C t)
which is essentially distributivity,
which I guess is not clear enough.  I added an explicit "By distributivity"}

Section 4.2, ".. applying the type constructor P1 .. should yield one
of .. That is, we need a nonparametric data type..." It is ambiguous
whether we need a nonparametric type because there are two alternatives
for P1, or because both alternatives are different from the type
designated by the class Symantics.

\jacques{I don't know how to clarify this, but neither of those reasons
are why this type is nonparametric.}
\ccshan{I added "unlike applying P1 to Int or Bool" to try to clarify.}
\oleg{I have changed that slightly in the OCaml version...}

Section 4.2, "... however, the type P t is no longer parametric
in t..." Explain why this matters. Do we need parametricity somewhere?
Or is it not desirable simply because we want to show that we
do not need non-Haskell 98 features?

\jacques{It has to be paramatric else P can't be an instance of
Symantics, which is something stated only in the longer version.
I tried to say this, but all attempts made the paper longer.}
\ccshan{I just dropped it from the short version; it seems unessential.}

Section 4.4, "The code in Figure 7 natively unfolds fix whenever.."
But I don't see fix in Figure 7.

\jacques{oops -- fixed}

Section 5, "... their current implementation in GHC has problems."
Can you be more specific? 

\jacques{This was true of 6.4, but is it true of 6.6?}
\oleg{Yes, that is true in GHC 6.6.1, the latest released version.}

-------------------- review 2 --------------------
 
OVERALL RATING: 1 (weak accept) 
REVIEWER'S CONFIDENCE: 2 (medium) 
Presentation: 3 (fair)
 
----------------------- REVIEW --------------------

I think this paper has some great ideas in it, but there are two
problems: some messiness in its presentation, and something
impractical in the idea (for which see below).  These combine to make
me think it only deserves a "weak accept".

The paper starts oddly: the introduction includes a "final" example
that only hints at the technology used in the rest of the paper, and
is quite different from it in an important respect.  The disconnect
between what is done in the introduction and what is done in the rest
of the paper makes for an awkward transition.  In particular, it seems
strange to move from an object language needing explicit environments
and de Bruijn bound variables, to one where the object language
includes meta-level function spaces.

\jacques{Well, this is the Socratic approach at work -- start from
something quite familiar, and move slowly towards the more complicated
in easily understandable chunks, instead of leaping, as is done in way
too many papers.  No idea how to be even more upfront that this is what
we are doing, though apparently we really need to.}

This transition is not commented on, but is it the intention that we
should imagine the later sections of the paper use the introduction's
approach to convert from object language abstractions into HOAS style
abstractions?   Otherwise, Section 1 seems rather an orphan, and not
really so relevant to the main thrust of the rest of the paper.

The introduction does make it clear how the basic approach will work,
and the following sections bear out the introduction's claims.  In
particular, Section 2 makes it clear that the basic approach is to
represent object values with functors, and that various analyses and
transformations are achieved by passing different modules as arguments
to these functors.  For example, the R module provides a simple
interpretation (in some sense, the "identity" transformation), and it
can be passed to the EX functor in order to interpret EX's two
programs (test1, and testpowfix7).

Similarly, Section 3 describes a module C, which can be used to
compile object language code into the meta-level using MetaOCaml's
facilities for doing this.  This is elegant.  Again, the object value
EX is acted on by C, by having module C passed to the EX functor.

Section 4 gets off to a horrid start presentationally because it
silently switches implementation languages (to Haskell).  This is
particularly ugly in the suggested definition of the new P0 type,
where OCaml modules R and C suddenly become Haskell type operators of
the same names.  At this point, the reader is almost sure to become
lost.  In fact, given that the Haskell-specific solution with GADTs
ends up being dismissed as "not quite satisfactory", I wonder at the
need for this diversion at all.  Perhaps it would be better to discuss
the Haskell GADT part-solution in a separate, later, section of the
paper, just to answer the inevitable questions from readers who
imagine that GADTs might provide a good solution.

\jacques{I am torn here.  In *this* version of the paper, we only 
switch to Haskell for 4.1-4.3, and then back to MetaOCaml for 4.4!  So
it is somewhat jarring.}

The "final" solution of Section 4.4 is convincing, though again marred
by presentation: the abbreviating 'x type variables within the types
ascribed to the signature are more confusing than useful.  I can
believe that the types (particularly that for fix) will get large, but
perhaps a standard type equation might make things clearer.  Something
like

  type ('c,'da,'db,'sa,'sb) frep =
       ('c, ('c,'sa,'da)repr -> ('c,'sb,'db) repr, 'da -> 'db) repr

could be used, and this rather complicated monster might then warrant
further explanation.  Also, Figure 7 does not include the definition
of fix, as promised.

\jacques{The figure 7 glitch is fixed.  And I like the "as 'x".
Type ascriptions are nicely covered in TAPL, it's not our fault not
enough people really get them}

Section 5 looks to be a reasonable summary of related work, though I'm
not an expert in the field.  Towards the end of this section, the
names of Washburn and Weirich are omitted in the sentence mentioning
their cite, making it ungrammatical.

\jacques{This was a bug in the submitted version, the version that I 
currently get from LaTeX does not have this glitch}

Finally, my doubts about practicality: this approach seems to preclude
writing programs that manipulate different object language inputs
programmatically.  Recall that if we are to apply multiple analyses to
the same object program we need to have that object program
represented as a functor, which can be applied to the
analysis/transformation modules as required.  But how do I write the
front-end that takes an input string, say, and turns it into a
functor?  Can I treat functors as arguments to functions?  No.  But
can I pass functors to higher-order functors so that programs can be
passed around and manipulated?  Certainly not in SML, but what does
OCaml provide here?  Maybe we might even set up a parsing functor that
would be able to return the functor corresponding to the input
program.  I don't know, but I'm both pessimistic and very keen to hear
otherwise! 

\jacques{Answer: camlp4 and/or TH can certainly cope with that.
And higher-order functors can be passed around in OCaml.  However,
I don't think a "parsing functor" can be created -- that would need
camlp4, I think.}
\oleg{We talk about parsing in the Introduction, the last paragraph of
Sec 1.1. Incidentally, in AliceML one may indeed parse a program into
a functor -- AliceML permits serialization and deserialization of
functors. Perhaps other typed systems supporting distributed computations
can do teh same.}

-------------------- review 3 --------------------
 
OVERALL RATING: 2 (strong accept) 
REVIEWER'S CONFIDENCE: 3 (high) 
Presentation: 4 (good)
 
----------------------- REVIEW --------------------

The authors show how to define evaluators (ie a interpreter, compiler
and partial evaluator) for a typed object language in terms of
a typed meta language without using GADTs, dependent types, or
universal types. Concrete code fragments demonstrating the approach
are given in Haskell 98 and MetaOCaml.

I would classify this work as a "functional pearl", though APLAS has 
no such category. Anyway, this is interesting and useful work. 
I recommend acceptance. 

Further comments:

Switching between ML and Haskell code fragments makes the paper
hard to read. Why not stick to one language.

p5 pretty much all works which show how to encode GADTs in terms of
   Hindley/Milner borrow ideas from [38]. I know that [38] is
   a tough paper to read. I think you should give [38] more credit
   in the related work section

\jacques{Absolutely right.  It is a bit hard to read, but it really
does deserve more credit (I just finished reading it).  I have added
another clear reference}
\oleg{There is still space for a sentence or two of further credit.}

p6 your definition of class Symantics reminds me of Hinze's
   "Generics for the masses" paper where he employs a similar idea
   by abstracting over the concrete implementation by abstracting
   over the type constructor repr

\jacques{yes, but the relation between the two methods is quite shallow.
What is cool, in both cases, is that it _works_ in a typed system.
That and he's abstracting out polynomial Functors, while we're abstracting
out something much more complicated.}

   BTW, the "interpreter" instance of class Symantics will require
   newtypes (data types would incur a penalty because of tags)

p13 "...current implementation in GHC has problems".

   Well, I'd say not anymore. I hope you agree that in 'practice'
   we'll use type extensions such as GADTs to define well-typed
   interpreters. Of course, your work is nice in that you show that
   we do without GADTs.

\jacques{Is 6.6 OK?  And, yes, in practice one might wish to use GADTs, 
   assuming that they "play well" with other parts, which certainly was
   not true in 6.4.}
\oleg{6.6.1 is still problematic}

   I recall a paper by  Oliver Danvy, Morten Rhiger
   "A Simple Take on Typed Abstract Syntax in Haskell-like Languages"
   FLOPS'01 which talks about representing typed abstract syntax
   in Haskell. This work may be relevant to yours. 

\jacques{This paper is most definitely relevant.  It does its work 
   via injection/projection pairs, and it gets really really close to
   what we've done.  They were missing the work of [38] and then they
   could have done a fair bit of what we've done.  We need to cite this
   too.  But I am really afraid to blow the page limit, I will let 
   someone else fiddle with this! TODO}
\oleg{I believe that paper is part of Rhiger's thesis, which we
discuss in the related work. It's worth double-checking though...}
